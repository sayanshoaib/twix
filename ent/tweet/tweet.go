// Code generated by ent, DO NOT EDIT.

package tweet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tweet types in the database.
	Label = "tweet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTweetID holds the string denoting the tweet_id field in the database.
	FieldTweetID = "tweet_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldMedia holds the string denoting the media field in the database.
	FieldMedia = "media"
	// FieldPlace holds the string denoting the place field in the database.
	FieldPlace = "place"
	// FieldReplyCount holds the string denoting the reply_count field in the database.
	FieldReplyCount = "reply_count"
	// FieldRetweetCount holds the string denoting the retweet_count field in the database.
	FieldRetweetCount = "retweet_count"
	// FieldRateCount holds the string denoting the rate_count field in the database.
	FieldRateCount = "rate_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeRates holds the string denoting the rates edge name in mutations.
	EdgeRates = "rates"
	// Table holds the table name of the tweet in the database.
	Table = "tweets"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "tweets"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_tweets"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "tweet_comments"
	// RatesTable is the table that holds the rates relation/edge.
	RatesTable = "rates"
	// RatesInverseTable is the table name for the Rate entity.
	// It exists in this package in order to avoid circular dependency with the "rate" package.
	RatesInverseTable = "rates"
	// RatesColumn is the table column denoting the rates relation/edge.
	RatesColumn = "tweet_rates"
)

// Columns holds all SQL columns for tweet fields.
var Columns = []string{
	FieldID,
	FieldTweetID,
	FieldContent,
	FieldMedia,
	FieldPlace,
	FieldReplyCount,
	FieldRetweetCount,
	FieldRateCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tweets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_tweets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultReplyCount holds the default value on creation for the "reply_count" field.
	DefaultReplyCount int
	// ReplyCountValidator is a validator for the "reply_count" field. It is called by the builders before save.
	ReplyCountValidator func(int) error
	// DefaultRetweetCount holds the default value on creation for the "retweet_count" field.
	DefaultRetweetCount int
	// RetweetCountValidator is a validator for the "retweet_count" field. It is called by the builders before save.
	RetweetCountValidator func(int) error
	// DefaultRateCount holds the default value on creation for the "rate_count" field.
	DefaultRateCount int
	// RateCountValidator is a validator for the "rate_count" field. It is called by the builders before save.
	RateCountValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Tweet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTweetID orders the results by the tweet_id field.
func ByTweetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTweetID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByPlace orders the results by the place field.
func ByPlace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlace, opts...).ToFunc()
}

// ByReplyCount orders the results by the reply_count field.
func ByReplyCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyCount, opts...).ToFunc()
}

// ByRetweetCount orders the results by the retweet_count field.
func ByRetweetCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetweetCount, opts...).ToFunc()
}

// ByRateCount orders the results by the rate_count field.
func ByRateCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRateCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRatesCount orders the results by rates count.
func ByRatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRatesStep(), opts...)
	}
}

// ByRates orders the results by rates terms.
func ByRates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
func newRatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RatesTable, RatesColumn),
	)
}
