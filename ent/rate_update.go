// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"twix/ent/predicate"
	"twix/ent/rate"
	"twix/ent/tweet"
	"twix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RateUpdate is the builder for updating Rate entities.
type RateUpdate struct {
	config
	hooks    []Hook
	mutation *RateMutation
}

// Where appends a list predicates to the RateUpdate builder.
func (ru *RateUpdate) Where(ps ...predicate.Rate) *RateUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRateID sets the "rate_id" field.
func (ru *RateUpdate) SetRateID(u *uuid.UUID) *RateUpdate {
	ru.mutation.SetRateID(u)
	return ru
}

// SetReaction sets the "reaction" field.
func (ru *RateUpdate) SetReaction(r rate.Reaction) *RateUpdate {
	ru.mutation.SetReaction(r)
	return ru
}

// SetNillableReaction sets the "reaction" field if the given value is not nil.
func (ru *RateUpdate) SetNillableReaction(r *rate.Reaction) *RateUpdate {
	if r != nil {
		ru.SetReaction(*r)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RateUpdate) SetCreatedAt(t time.Time) *RateUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RateUpdate) SetNillableCreatedAt(t *time.Time) *RateUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RateUpdate) SetUpdatedAt(t time.Time) *RateUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetTweetID sets the "tweet" edge to the Tweet entity by ID.
func (ru *RateUpdate) SetTweetID(id int) *RateUpdate {
	ru.mutation.SetTweetID(id)
	return ru
}

// SetNillableTweetID sets the "tweet" edge to the Tweet entity by ID if the given value is not nil.
func (ru *RateUpdate) SetNillableTweetID(id *int) *RateUpdate {
	if id != nil {
		ru = ru.SetTweetID(*id)
	}
	return ru
}

// SetTweet sets the "tweet" edge to the Tweet entity.
func (ru *RateUpdate) SetTweet(t *Tweet) *RateUpdate {
	return ru.SetTweetID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *RateUpdate) SetUserID(id int) *RateUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ru *RateUpdate) SetNillableUserID(id *int) *RateUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *RateUpdate) SetUser(u *User) *RateUpdate {
	return ru.SetUserID(u.ID)
}

// Mutation returns the RateMutation object of the builder.
func (ru *RateUpdate) Mutation() *RateMutation {
	return ru.mutation
}

// ClearTweet clears the "tweet" edge to the Tweet entity.
func (ru *RateUpdate) ClearTweet() *RateUpdate {
	ru.mutation.ClearTweet()
	return ru
}

// ClearUser clears the "user" edge to the User entity.
func (ru *RateUpdate) ClearUser() *RateUpdate {
	ru.mutation.ClearUser()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RateUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RateUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RateUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RateUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RateUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := rate.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RateUpdate) check() error {
	if v, ok := ru.mutation.Reaction(); ok {
		if err := rate.ReactionValidator(v); err != nil {
			return &ValidationError{Name: "reaction", err: fmt.Errorf(`ent: validator failed for field "Rate.reaction": %w`, err)}
		}
	}
	return nil
}

func (ru *RateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rate.Table, rate.Columns, sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RateID(); ok {
		_spec.SetField(rate.FieldRateID, field.TypeUUID, value)
	}
	if value, ok := ru.mutation.Reaction(); ok {
		_spec.SetField(rate.FieldReaction, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(rate.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(rate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.TweetTable,
			Columns: []string{rate.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.TweetTable,
			Columns: []string{rate.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.UserTable,
			Columns: []string{rate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.UserTable,
			Columns: []string{rate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RateUpdateOne is the builder for updating a single Rate entity.
type RateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RateMutation
}

// SetRateID sets the "rate_id" field.
func (ruo *RateUpdateOne) SetRateID(u *uuid.UUID) *RateUpdateOne {
	ruo.mutation.SetRateID(u)
	return ruo
}

// SetReaction sets the "reaction" field.
func (ruo *RateUpdateOne) SetReaction(r rate.Reaction) *RateUpdateOne {
	ruo.mutation.SetReaction(r)
	return ruo
}

// SetNillableReaction sets the "reaction" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableReaction(r *rate.Reaction) *RateUpdateOne {
	if r != nil {
		ruo.SetReaction(*r)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RateUpdateOne) SetCreatedAt(t time.Time) *RateUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableCreatedAt(t *time.Time) *RateUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RateUpdateOne) SetUpdatedAt(t time.Time) *RateUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetTweetID sets the "tweet" edge to the Tweet entity by ID.
func (ruo *RateUpdateOne) SetTweetID(id int) *RateUpdateOne {
	ruo.mutation.SetTweetID(id)
	return ruo
}

// SetNillableTweetID sets the "tweet" edge to the Tweet entity by ID if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableTweetID(id *int) *RateUpdateOne {
	if id != nil {
		ruo = ruo.SetTweetID(*id)
	}
	return ruo
}

// SetTweet sets the "tweet" edge to the Tweet entity.
func (ruo *RateUpdateOne) SetTweet(t *Tweet) *RateUpdateOne {
	return ruo.SetTweetID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *RateUpdateOne) SetUserID(id int) *RateUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableUserID(id *int) *RateUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *RateUpdateOne) SetUser(u *User) *RateUpdateOne {
	return ruo.SetUserID(u.ID)
}

// Mutation returns the RateMutation object of the builder.
func (ruo *RateUpdateOne) Mutation() *RateMutation {
	return ruo.mutation
}

// ClearTweet clears the "tweet" edge to the Tweet entity.
func (ruo *RateUpdateOne) ClearTweet() *RateUpdateOne {
	ruo.mutation.ClearTweet()
	return ruo
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *RateUpdateOne) ClearUser() *RateUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// Where appends a list predicates to the RateUpdate builder.
func (ruo *RateUpdateOne) Where(ps ...predicate.Rate) *RateUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RateUpdateOne) Select(field string, fields ...string) *RateUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rate entity.
func (ruo *RateUpdateOne) Save(ctx context.Context) (*Rate, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RateUpdateOne) SaveX(ctx context.Context) *Rate {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RateUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RateUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RateUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := rate.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RateUpdateOne) check() error {
	if v, ok := ruo.mutation.Reaction(); ok {
		if err := rate.ReactionValidator(v); err != nil {
			return &ValidationError{Name: "reaction", err: fmt.Errorf(`ent: validator failed for field "Rate.reaction": %w`, err)}
		}
	}
	return nil
}

func (ruo *RateUpdateOne) sqlSave(ctx context.Context) (_node *Rate, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rate.Table, rate.Columns, sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rate.FieldID)
		for _, f := range fields {
			if !rate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.RateID(); ok {
		_spec.SetField(rate.FieldRateID, field.TypeUUID, value)
	}
	if value, ok := ruo.mutation.Reaction(); ok {
		_spec.SetField(rate.FieldReaction, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(rate.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(rate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.TweetTable,
			Columns: []string{rate.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.TweetTable,
			Columns: []string{rate.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.UserTable,
			Columns: []string{rate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.UserTable,
			Columns: []string{rate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rate{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
