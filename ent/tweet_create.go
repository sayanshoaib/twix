// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"
	"twix/ent/comment"
	"twix/ent/rate"
	"twix/ent/tweet"
	"twix/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TweetCreate is the builder for creating a Tweet entity.
type TweetCreate struct {
	config
	mutation *TweetMutation
	hooks    []Hook
}

// SetTweetID sets the "tweet_id" field.
func (tc *TweetCreate) SetTweetID(u *uuid.UUID) *TweetCreate {
	tc.mutation.SetTweetID(u)
	return tc
}

// SetContent sets the "content" field.
func (tc *TweetCreate) SetContent(s string) *TweetCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetMedia sets the "media" field.
func (tc *TweetCreate) SetMedia(u *url.URL) *TweetCreate {
	tc.mutation.SetMedia(u)
	return tc
}

// SetPlace sets the "place" field.
func (tc *TweetCreate) SetPlace(s string) *TweetCreate {
	tc.mutation.SetPlace(s)
	return tc
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (tc *TweetCreate) SetNillablePlace(s *string) *TweetCreate {
	if s != nil {
		tc.SetPlace(*s)
	}
	return tc
}

// SetReplyCount sets the "reply_count" field.
func (tc *TweetCreate) SetReplyCount(i int) *TweetCreate {
	tc.mutation.SetReplyCount(i)
	return tc
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (tc *TweetCreate) SetNillableReplyCount(i *int) *TweetCreate {
	if i != nil {
		tc.SetReplyCount(*i)
	}
	return tc
}

// SetRetweetCount sets the "retweet_count" field.
func (tc *TweetCreate) SetRetweetCount(i int) *TweetCreate {
	tc.mutation.SetRetweetCount(i)
	return tc
}

// SetNillableRetweetCount sets the "retweet_count" field if the given value is not nil.
func (tc *TweetCreate) SetNillableRetweetCount(i *int) *TweetCreate {
	if i != nil {
		tc.SetRetweetCount(*i)
	}
	return tc
}

// SetRateCount sets the "rate_count" field.
func (tc *TweetCreate) SetRateCount(i int) *TweetCreate {
	tc.mutation.SetRateCount(i)
	return tc
}

// SetNillableRateCount sets the "rate_count" field if the given value is not nil.
func (tc *TweetCreate) SetNillableRateCount(i *int) *TweetCreate {
	if i != nil {
		tc.SetRateCount(*i)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TweetCreate) SetCreatedAt(t time.Time) *TweetCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TweetCreate) SetNillableCreatedAt(t *time.Time) *TweetCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TweetCreate) SetUpdatedAt(t time.Time) *TweetCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TweetCreate) SetNillableUpdatedAt(t *time.Time) *TweetCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tc *TweetCreate) SetOwnerID(id int) *TweetCreate {
	tc.mutation.SetOwnerID(id)
	return tc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tc *TweetCreate) SetNillableOwnerID(id *int) *TweetCreate {
	if id != nil {
		tc = tc.SetOwnerID(*id)
	}
	return tc
}

// SetOwner sets the "owner" edge to the User entity.
func (tc *TweetCreate) SetOwner(u *User) *TweetCreate {
	return tc.SetOwnerID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tc *TweetCreate) AddCommentIDs(ids ...int) *TweetCreate {
	tc.mutation.AddCommentIDs(ids...)
	return tc
}

// AddComments adds the "comments" edges to the Comment entity.
func (tc *TweetCreate) AddComments(c ...*Comment) *TweetCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddCommentIDs(ids...)
}

// AddRateIDs adds the "rates" edge to the Rate entity by IDs.
func (tc *TweetCreate) AddRateIDs(ids ...int) *TweetCreate {
	tc.mutation.AddRateIDs(ids...)
	return tc
}

// AddRates adds the "rates" edges to the Rate entity.
func (tc *TweetCreate) AddRates(r ...*Rate) *TweetCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tc.AddRateIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tc *TweetCreate) Mutation() *TweetMutation {
	return tc.mutation
}

// Save creates the Tweet in the database.
func (tc *TweetCreate) Save(ctx context.Context) (*Tweet, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TweetCreate) SaveX(ctx context.Context) *Tweet {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TweetCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TweetCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TweetCreate) defaults() {
	if _, ok := tc.mutation.ReplyCount(); !ok {
		v := tweet.DefaultReplyCount
		tc.mutation.SetReplyCount(v)
	}
	if _, ok := tc.mutation.RetweetCount(); !ok {
		v := tweet.DefaultRetweetCount
		tc.mutation.SetRetweetCount(v)
	}
	if _, ok := tc.mutation.RateCount(); !ok {
		v := tweet.DefaultRateCount
		tc.mutation.SetRateCount(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tweet.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tweet.DefaultUpdatedAt
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TweetCreate) check() error {
	if _, ok := tc.mutation.TweetID(); !ok {
		return &ValidationError{Name: "tweet_id", err: errors.New(`ent: missing required field "Tweet.tweet_id"`)}
	}
	if _, ok := tc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Tweet.content"`)}
	}
	if v, ok := tc.mutation.Content(); ok {
		if err := tweet.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Tweet.content": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Media(); !ok {
		return &ValidationError{Name: "media", err: errors.New(`ent: missing required field "Tweet.media"`)}
	}
	if _, ok := tc.mutation.ReplyCount(); !ok {
		return &ValidationError{Name: "reply_count", err: errors.New(`ent: missing required field "Tweet.reply_count"`)}
	}
	if v, ok := tc.mutation.ReplyCount(); ok {
		if err := tweet.ReplyCountValidator(v); err != nil {
			return &ValidationError{Name: "reply_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.reply_count": %w`, err)}
		}
	}
	if _, ok := tc.mutation.RetweetCount(); !ok {
		return &ValidationError{Name: "retweet_count", err: errors.New(`ent: missing required field "Tweet.retweet_count"`)}
	}
	if v, ok := tc.mutation.RetweetCount(); ok {
		if err := tweet.RetweetCountValidator(v); err != nil {
			return &ValidationError{Name: "retweet_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.retweet_count": %w`, err)}
		}
	}
	if _, ok := tc.mutation.RateCount(); !ok {
		return &ValidationError{Name: "rate_count", err: errors.New(`ent: missing required field "Tweet.rate_count"`)}
	}
	if v, ok := tc.mutation.RateCount(); ok {
		if err := tweet.RateCountValidator(v); err != nil {
			return &ValidationError{Name: "rate_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.rate_count": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tweet.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tweet.updated_at"`)}
	}
	return nil
}

func (tc *TweetCreate) sqlSave(ctx context.Context) (*Tweet, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TweetCreate) createSpec() (*Tweet, *sqlgraph.CreateSpec) {
	var (
		_node = &Tweet{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tweet.Table, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.TweetID(); ok {
		_spec.SetField(tweet.FieldTweetID, field.TypeUUID, value)
		_node.TweetID = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.SetField(tweet.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := tc.mutation.Media(); ok {
		_spec.SetField(tweet.FieldMedia, field.TypeJSON, value)
		_node.Media = value
	}
	if value, ok := tc.mutation.Place(); ok {
		_spec.SetField(tweet.FieldPlace, field.TypeString, value)
		_node.Place = &value
	}
	if value, ok := tc.mutation.ReplyCount(); ok {
		_spec.SetField(tweet.FieldReplyCount, field.TypeInt, value)
		_node.ReplyCount = value
	}
	if value, ok := tc.mutation.RetweetCount(); ok {
		_spec.SetField(tweet.FieldRetweetCount, field.TypeInt, value)
		_node.RetweetCount = value
	}
	if value, ok := tc.mutation.RateCount(); ok {
		_spec.SetField(tweet.FieldRateCount, field.TypeInt, value)
		_node.RateCount = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tweet.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.OwnerTable,
			Columns: []string{tweet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tweets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.CommentsTable,
			Columns: []string{tweet.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.RatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RatesTable,
			Columns: []string{tweet.RatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TweetCreateBulk is the builder for creating many Tweet entities in bulk.
type TweetCreateBulk struct {
	config
	err      error
	builders []*TweetCreate
}

// Save creates the Tweet entities in the database.
func (tcb *TweetCreateBulk) Save(ctx context.Context) ([]*Tweet, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tweet, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TweetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation types %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TweetCreateBulk) SaveX(ctx context.Context) []*Tweet {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TweetCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TweetCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
