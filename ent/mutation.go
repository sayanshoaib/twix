// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"sync"
	"time"
	"twix/ent/comment"
	"twix/ent/predicate"
	"twix/ent/rate"
	"twix/ent/tweet"
	"twix/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeComment = "Comment"
	TypeRate    = "Rate"
	TypeTweet   = "Tweet"
	TypeUser    = "User"
)

// CommentMutation represents an operation that mutates the Comment nodes in the graph.
type CommentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	comment_id    **uuid.UUID
	content       *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	tweet         *int
	clearedtweet  bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Comment, error)
	predicates    []predicate.Comment
}

var _ ent.Mutation = (*CommentMutation)(nil)

// commentOption allows management of the mutation configuration using functional options.
type commentOption func(*CommentMutation)

// newCommentMutation creates new mutation for the Comment entity.
func newCommentMutation(c config, op Op, opts ...commentOption) *CommentMutation {
	m := &CommentMutation{
		config:        c,
		op:            op,
		typ:           TypeComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentID sets the ID field of the mutation.
func withCommentID(id int) commentOption {
	return func(m *CommentMutation) {
		var (
			err   error
			once  sync.Once
			value *Comment
		)
		m.oldValue = func(ctx context.Context) (*Comment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComment sets the old Comment of the mutation.
func withComment(node *Comment) commentOption {
	return func(m *CommentMutation) {
		m.oldValue = func(context.Context) (*Comment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Comment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCommentID sets the "comment_id" field.
func (m *CommentMutation) SetCommentID(u *uuid.UUID) {
	m.comment_id = &u
}

// CommentID returns the value of the "comment_id" field in the mutation.
func (m *CommentMutation) CommentID() (r *uuid.UUID, exists bool) {
	v := m.comment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentID returns the old "comment_id" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldCommentID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentID: %w", err)
	}
	return oldValue.CommentID, nil
}

// ResetCommentID resets all changes to the "comment_id" field.
func (m *CommentMutation) ResetCommentID() {
	m.comment_id = nil
}

// SetContent sets the "content" field.
func (m *CommentMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *CommentMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *CommentMutation) ResetContent() {
	m.content = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CommentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CommentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CommentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTweetID sets the "tweet" edge to the Tweet entity by id.
func (m *CommentMutation) SetTweetID(id int) {
	m.tweet = &id
}

// ClearTweet clears the "tweet" edge to the Tweet entity.
func (m *CommentMutation) ClearTweet() {
	m.clearedtweet = true
}

// TweetCleared reports if the "tweet" edge to the Tweet entity was cleared.
func (m *CommentMutation) TweetCleared() bool {
	return m.clearedtweet
}

// TweetID returns the "tweet" edge ID in the mutation.
func (m *CommentMutation) TweetID() (id int, exists bool) {
	if m.tweet != nil {
		return *m.tweet, true
	}
	return
}

// TweetIDs returns the "tweet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TweetID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) TweetIDs() (ids []int) {
	if id := m.tweet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTweet resets all changes to the "tweet" edge.
func (m *CommentMutation) ResetTweet() {
	m.tweet = nil
	m.clearedtweet = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *CommentMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *CommentMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CommentMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *CommentMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CommentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the CommentMutation builder.
func (m *CommentMutation) Where(ps ...predicate.Comment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommentMutation builder. Using this method,
// users can use types-assertion to append predicates that do not depend on any generated package.
func (m *CommentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Comment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node types of this mutation (Comment).
func (m *CommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.comment_id != nil {
		fields = append(fields, comment.FieldCommentID)
	}
	if m.content != nil {
		fields = append(fields, comment.FieldContent)
	}
	if m.created_at != nil {
		fields = append(fields, comment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, comment.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldCommentID:
		return m.CommentID()
	case comment.FieldContent:
		return m.Content()
	case comment.FieldCreatedAt:
		return m.CreatedAt()
	case comment.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comment.FieldCommentID:
		return m.OldCommentID(ctx)
	case comment.FieldContent:
		return m.OldContent(ctx)
	case comment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case comment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Comment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the types mismatched the field
// types.
func (m *CommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comment.FieldCommentID:
		v, ok := value.(*uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetCommentID(v)
		return nil
	case comment.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case comment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case comment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the types mismatched the field
// types.
func (m *CommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Comment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Comment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentMutation) ResetField(name string) error {
	switch name {
	case comment.FieldCommentID:
		m.ResetCommentID()
		return nil
	case comment.FieldContent:
		m.ResetContent()
		return nil
	case comment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case comment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tweet != nil {
		edges = append(edges, comment.EdgeTweet)
	}
	if m.user != nil {
		edges = append(edges, comment.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comment.EdgeTweet:
		if id := m.tweet; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtweet {
		edges = append(edges, comment.EdgeTweet)
	}
	if m.cleareduser {
		edges = append(edges, comment.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentMutation) EdgeCleared(name string) bool {
	switch name {
	case comment.EdgeTweet:
		return m.clearedtweet
	case comment.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentMutation) ClearEdge(name string) error {
	switch name {
	case comment.EdgeTweet:
		m.ClearTweet()
		return nil
	case comment.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Comment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentMutation) ResetEdge(name string) error {
	switch name {
	case comment.EdgeTweet:
		m.ResetTweet()
		return nil
	case comment.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Comment edge %s", name)
}

// RateMutation represents an operation that mutates the Rate nodes in the graph.
type RateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	rate_id       **uuid.UUID
	reaction      *rate.Reaction
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	tweet         *int
	clearedtweet  bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Rate, error)
	predicates    []predicate.Rate
}

var _ ent.Mutation = (*RateMutation)(nil)

// rateOption allows management of the mutation configuration using functional options.
type rateOption func(*RateMutation)

// newRateMutation creates new mutation for the Rate entity.
func newRateMutation(c config, op Op, opts ...rateOption) *RateMutation {
	m := &RateMutation{
		config:        c,
		op:            op,
		typ:           TypeRate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRateID sets the ID field of the mutation.
func withRateID(id int) rateOption {
	return func(m *RateMutation) {
		var (
			err   error
			once  sync.Once
			value *Rate
		)
		m.oldValue = func(ctx context.Context) (*Rate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRate sets the old Rate of the mutation.
func withRate(node *Rate) rateOption {
	return func(m *RateMutation) {
		m.oldValue = func(context.Context) (*Rate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RateMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRateID sets the "rate_id" field.
func (m *RateMutation) SetRateID(u *uuid.UUID) {
	m.rate_id = &u
}

// RateID returns the value of the "rate_id" field in the mutation.
func (m *RateMutation) RateID() (r *uuid.UUID, exists bool) {
	v := m.rate_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRateID returns the old "rate_id" field's value of the Rate entity.
// If the Rate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RateMutation) OldRateID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRateID: %w", err)
	}
	return oldValue.RateID, nil
}

// ResetRateID resets all changes to the "rate_id" field.
func (m *RateMutation) ResetRateID() {
	m.rate_id = nil
}

// SetReaction sets the "reaction" field.
func (m *RateMutation) SetReaction(r rate.Reaction) {
	m.reaction = &r
}

// Reaction returns the value of the "reaction" field in the mutation.
func (m *RateMutation) Reaction() (r rate.Reaction, exists bool) {
	v := m.reaction
	if v == nil {
		return
	}
	return *v, true
}

// OldReaction returns the old "reaction" field's value of the Rate entity.
// If the Rate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RateMutation) OldReaction(ctx context.Context) (v rate.Reaction, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReaction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReaction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReaction: %w", err)
	}
	return oldValue.Reaction, nil
}

// ResetReaction resets all changes to the "reaction" field.
func (m *RateMutation) ResetReaction() {
	m.reaction = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Rate entity.
// If the Rate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Rate entity.
// If the Rate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTweetID sets the "tweet" edge to the Tweet entity by id.
func (m *RateMutation) SetTweetID(id int) {
	m.tweet = &id
}

// ClearTweet clears the "tweet" edge to the Tweet entity.
func (m *RateMutation) ClearTweet() {
	m.clearedtweet = true
}

// TweetCleared reports if the "tweet" edge to the Tweet entity was cleared.
func (m *RateMutation) TweetCleared() bool {
	return m.clearedtweet
}

// TweetID returns the "tweet" edge ID in the mutation.
func (m *RateMutation) TweetID() (id int, exists bool) {
	if m.tweet != nil {
		return *m.tweet, true
	}
	return
}

// TweetIDs returns the "tweet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TweetID instead. It exists only for internal usage by the builders.
func (m *RateMutation) TweetIDs() (ids []int) {
	if id := m.tweet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTweet resets all changes to the "tweet" edge.
func (m *RateMutation) ResetTweet() {
	m.tweet = nil
	m.clearedtweet = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *RateMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *RateMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *RateMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *RateMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RateMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RateMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the RateMutation builder.
func (m *RateMutation) Where(ps ...predicate.Rate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RateMutation builder. Using this method,
// users can use types-assertion to append predicates that do not depend on any generated package.
func (m *RateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node types of this mutation (Rate).
func (m *RateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RateMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.rate_id != nil {
		fields = append(fields, rate.FieldRateID)
	}
	if m.reaction != nil {
		fields = append(fields, rate.FieldReaction)
	}
	if m.created_at != nil {
		fields = append(fields, rate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rate.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rate.FieldRateID:
		return m.RateID()
	case rate.FieldReaction:
		return m.Reaction()
	case rate.FieldCreatedAt:
		return m.CreatedAt()
	case rate.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rate.FieldRateID:
		return m.OldRateID(ctx)
	case rate.FieldReaction:
		return m.OldReaction(ctx)
	case rate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Rate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the types mismatched the field
// types.
func (m *RateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rate.FieldRateID:
		v, ok := value.(*uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetRateID(v)
		return nil
	case rate.FieldReaction:
		v, ok := value.(rate.Reaction)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetReaction(v)
		return nil
	case rate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Rate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the types mismatched the field
// types.
func (m *RateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RateMutation) ResetField(name string) error {
	switch name {
	case rate.FieldRateID:
		m.ResetRateID()
		return nil
	case rate.FieldReaction:
		m.ResetReaction()
		return nil
	case rate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Rate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tweet != nil {
		edges = append(edges, rate.EdgeTweet)
	}
	if m.user != nil {
		edges = append(edges, rate.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rate.EdgeTweet:
		if id := m.tweet; id != nil {
			return []ent.Value{*id}
		}
	case rate.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtweet {
		edges = append(edges, rate.EdgeTweet)
	}
	if m.cleareduser {
		edges = append(edges, rate.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RateMutation) EdgeCleared(name string) bool {
	switch name {
	case rate.EdgeTweet:
		return m.clearedtweet
	case rate.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RateMutation) ClearEdge(name string) error {
	switch name {
	case rate.EdgeTweet:
		m.ClearTweet()
		return nil
	case rate.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Rate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RateMutation) ResetEdge(name string) error {
	switch name {
	case rate.EdgeTweet:
		m.ResetTweet()
		return nil
	case rate.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Rate edge %s", name)
}

// TweetMutation represents an operation that mutates the Tweet nodes in the graph.
type TweetMutation struct {
	config
	op               Op
	typ              string
	id               *int
	tweet_id         **uuid.UUID
	content          *string
	media            **url.URL
	place            *string
	reply_count      *int
	addreply_count   *int
	retweet_count    *int
	addretweet_count *int
	rate_count       *int
	addrate_count    *int
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	owner            *int
	clearedowner     bool
	comments         map[int]struct{}
	removedcomments  map[int]struct{}
	clearedcomments  bool
	rates            map[int]struct{}
	removedrates     map[int]struct{}
	clearedrates     bool
	done             bool
	oldValue         func(context.Context) (*Tweet, error)
	predicates       []predicate.Tweet
}

var _ ent.Mutation = (*TweetMutation)(nil)

// tweetOption allows management of the mutation configuration using functional options.
type tweetOption func(*TweetMutation)

// newTweetMutation creates new mutation for the Tweet entity.
func newTweetMutation(c config, op Op, opts ...tweetOption) *TweetMutation {
	m := &TweetMutation{
		config:        c,
		op:            op,
		typ:           TypeTweet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTweetID sets the ID field of the mutation.
func withTweetID(id int) tweetOption {
	return func(m *TweetMutation) {
		var (
			err   error
			once  sync.Once
			value *Tweet
		)
		m.oldValue = func(ctx context.Context) (*Tweet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tweet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTweet sets the old Tweet of the mutation.
func withTweet(node *Tweet) tweetOption {
	return func(m *TweetMutation) {
		m.oldValue = func(context.Context) (*Tweet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TweetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TweetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TweetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TweetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tweet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTweetID sets the "tweet_id" field.
func (m *TweetMutation) SetTweetID(u *uuid.UUID) {
	m.tweet_id = &u
}

// TweetID returns the value of the "tweet_id" field in the mutation.
func (m *TweetMutation) TweetID() (r *uuid.UUID, exists bool) {
	v := m.tweet_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTweetID returns the old "tweet_id" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldTweetID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTweetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTweetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTweetID: %w", err)
	}
	return oldValue.TweetID, nil
}

// ResetTweetID resets all changes to the "tweet_id" field.
func (m *TweetMutation) ResetTweetID() {
	m.tweet_id = nil
}

// SetContent sets the "content" field.
func (m *TweetMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TweetMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TweetMutation) ResetContent() {
	m.content = nil
}

// SetMedia sets the "media" field.
func (m *TweetMutation) SetMedia(u *url.URL) {
	m.media = &u
}

// Media returns the value of the "media" field in the mutation.
func (m *TweetMutation) Media() (r *url.URL, exists bool) {
	v := m.media
	if v == nil {
		return
	}
	return *v, true
}

// OldMedia returns the old "media" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldMedia(ctx context.Context) (v *url.URL, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedia is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedia requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedia: %w", err)
	}
	return oldValue.Media, nil
}

// ResetMedia resets all changes to the "media" field.
func (m *TweetMutation) ResetMedia() {
	m.media = nil
}

// SetPlace sets the "place" field.
func (m *TweetMutation) SetPlace(s string) {
	m.place = &s
}

// Place returns the value of the "place" field in the mutation.
func (m *TweetMutation) Place() (r string, exists bool) {
	v := m.place
	if v == nil {
		return
	}
	return *v, true
}

// OldPlace returns the old "place" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldPlace(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlace: %w", err)
	}
	return oldValue.Place, nil
}

// ClearPlace clears the value of the "place" field.
func (m *TweetMutation) ClearPlace() {
	m.place = nil
	m.clearedFields[tweet.FieldPlace] = struct{}{}
}

// PlaceCleared returns if the "place" field was cleared in this mutation.
func (m *TweetMutation) PlaceCleared() bool {
	_, ok := m.clearedFields[tweet.FieldPlace]
	return ok
}

// ResetPlace resets all changes to the "place" field.
func (m *TweetMutation) ResetPlace() {
	m.place = nil
	delete(m.clearedFields, tweet.FieldPlace)
}

// SetReplyCount sets the "reply_count" field.
func (m *TweetMutation) SetReplyCount(i int) {
	m.reply_count = &i
	m.addreply_count = nil
}

// ReplyCount returns the value of the "reply_count" field in the mutation.
func (m *TweetMutation) ReplyCount() (r int, exists bool) {
	v := m.reply_count
	if v == nil {
		return
	}
	return *v, true
}

// OldReplyCount returns the old "reply_count" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldReplyCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReplyCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReplyCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplyCount: %w", err)
	}
	return oldValue.ReplyCount, nil
}

// AddReplyCount adds i to the "reply_count" field.
func (m *TweetMutation) AddReplyCount(i int) {
	if m.addreply_count != nil {
		*m.addreply_count += i
	} else {
		m.addreply_count = &i
	}
}

// AddedReplyCount returns the value that was added to the "reply_count" field in this mutation.
func (m *TweetMutation) AddedReplyCount() (r int, exists bool) {
	v := m.addreply_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetReplyCount resets all changes to the "reply_count" field.
func (m *TweetMutation) ResetReplyCount() {
	m.reply_count = nil
	m.addreply_count = nil
}

// SetRetweetCount sets the "retweet_count" field.
func (m *TweetMutation) SetRetweetCount(i int) {
	m.retweet_count = &i
	m.addretweet_count = nil
}

// RetweetCount returns the value of the "retweet_count" field in the mutation.
func (m *TweetMutation) RetweetCount() (r int, exists bool) {
	v := m.retweet_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRetweetCount returns the old "retweet_count" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldRetweetCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetweetCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetweetCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetweetCount: %w", err)
	}
	return oldValue.RetweetCount, nil
}

// AddRetweetCount adds i to the "retweet_count" field.
func (m *TweetMutation) AddRetweetCount(i int) {
	if m.addretweet_count != nil {
		*m.addretweet_count += i
	} else {
		m.addretweet_count = &i
	}
}

// AddedRetweetCount returns the value that was added to the "retweet_count" field in this mutation.
func (m *TweetMutation) AddedRetweetCount() (r int, exists bool) {
	v := m.addretweet_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetweetCount resets all changes to the "retweet_count" field.
func (m *TweetMutation) ResetRetweetCount() {
	m.retweet_count = nil
	m.addretweet_count = nil
}

// SetRateCount sets the "rate_count" field.
func (m *TweetMutation) SetRateCount(i int) {
	m.rate_count = &i
	m.addrate_count = nil
}

// RateCount returns the value of the "rate_count" field in the mutation.
func (m *TweetMutation) RateCount() (r int, exists bool) {
	v := m.rate_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRateCount returns the old "rate_count" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldRateCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRateCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRateCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRateCount: %w", err)
	}
	return oldValue.RateCount, nil
}

// AddRateCount adds i to the "rate_count" field.
func (m *TweetMutation) AddRateCount(i int) {
	if m.addrate_count != nil {
		*m.addrate_count += i
	} else {
		m.addrate_count = &i
	}
}

// AddedRateCount returns the value that was added to the "rate_count" field in this mutation.
func (m *TweetMutation) AddedRateCount() (r int, exists bool) {
	v := m.addrate_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRateCount resets all changes to the "rate_count" field.
func (m *TweetMutation) ResetRateCount() {
	m.rate_count = nil
	m.addrate_count = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TweetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TweetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TweetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TweetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TweetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TweetMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *TweetMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *TweetMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *TweetMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *TweetMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *TweetMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *TweetMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *TweetMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *TweetMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *TweetMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *TweetMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comments, ids[i])
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *TweetMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *TweetMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *TweetMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// AddRateIDs adds the "rates" edge to the Rate entity by ids.
func (m *TweetMutation) AddRateIDs(ids ...int) {
	if m.rates == nil {
		m.rates = make(map[int]struct{})
	}
	for i := range ids {
		m.rates[ids[i]] = struct{}{}
	}
}

// ClearRates clears the "rates" edge to the Rate entity.
func (m *TweetMutation) ClearRates() {
	m.clearedrates = true
}

// RatesCleared reports if the "rates" edge to the Rate entity was cleared.
func (m *TweetMutation) RatesCleared() bool {
	return m.clearedrates
}

// RemoveRateIDs removes the "rates" edge to the Rate entity by IDs.
func (m *TweetMutation) RemoveRateIDs(ids ...int) {
	if m.removedrates == nil {
		m.removedrates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rates, ids[i])
		m.removedrates[ids[i]] = struct{}{}
	}
}

// RemovedRates returns the removed IDs of the "rates" edge to the Rate entity.
func (m *TweetMutation) RemovedRatesIDs() (ids []int) {
	for id := range m.removedrates {
		ids = append(ids, id)
	}
	return
}

// RatesIDs returns the "rates" edge IDs in the mutation.
func (m *TweetMutation) RatesIDs() (ids []int) {
	for id := range m.rates {
		ids = append(ids, id)
	}
	return
}

// ResetRates resets all changes to the "rates" edge.
func (m *TweetMutation) ResetRates() {
	m.rates = nil
	m.clearedrates = false
	m.removedrates = nil
}

// Where appends a list predicates to the TweetMutation builder.
func (m *TweetMutation) Where(ps ...predicate.Tweet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TweetMutation builder. Using this method,
// users can use types-assertion to append predicates that do not depend on any generated package.
func (m *TweetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tweet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TweetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TweetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node types of this mutation (Tweet).
func (m *TweetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TweetMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.tweet_id != nil {
		fields = append(fields, tweet.FieldTweetID)
	}
	if m.content != nil {
		fields = append(fields, tweet.FieldContent)
	}
	if m.media != nil {
		fields = append(fields, tweet.FieldMedia)
	}
	if m.place != nil {
		fields = append(fields, tweet.FieldPlace)
	}
	if m.reply_count != nil {
		fields = append(fields, tweet.FieldReplyCount)
	}
	if m.retweet_count != nil {
		fields = append(fields, tweet.FieldRetweetCount)
	}
	if m.rate_count != nil {
		fields = append(fields, tweet.FieldRateCount)
	}
	if m.created_at != nil {
		fields = append(fields, tweet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tweet.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TweetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tweet.FieldTweetID:
		return m.TweetID()
	case tweet.FieldContent:
		return m.Content()
	case tweet.FieldMedia:
		return m.Media()
	case tweet.FieldPlace:
		return m.Place()
	case tweet.FieldReplyCount:
		return m.ReplyCount()
	case tweet.FieldRetweetCount:
		return m.RetweetCount()
	case tweet.FieldRateCount:
		return m.RateCount()
	case tweet.FieldCreatedAt:
		return m.CreatedAt()
	case tweet.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TweetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tweet.FieldTweetID:
		return m.OldTweetID(ctx)
	case tweet.FieldContent:
		return m.OldContent(ctx)
	case tweet.FieldMedia:
		return m.OldMedia(ctx)
	case tweet.FieldPlace:
		return m.OldPlace(ctx)
	case tweet.FieldReplyCount:
		return m.OldReplyCount(ctx)
	case tweet.FieldRetweetCount:
		return m.OldRetweetCount(ctx)
	case tweet.FieldRateCount:
		return m.OldRateCount(ctx)
	case tweet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tweet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Tweet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the types mismatched the field
// types.
func (m *TweetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tweet.FieldTweetID:
		v, ok := value.(*uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetTweetID(v)
		return nil
	case tweet.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case tweet.FieldMedia:
		v, ok := value.(*url.URL)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetMedia(v)
		return nil
	case tweet.FieldPlace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetPlace(v)
		return nil
	case tweet.FieldReplyCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetReplyCount(v)
		return nil
	case tweet.FieldRetweetCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetRetweetCount(v)
		return nil
	case tweet.FieldRateCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetRateCount(v)
		return nil
	case tweet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tweet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tweet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TweetMutation) AddedFields() []string {
	var fields []string
	if m.addreply_count != nil {
		fields = append(fields, tweet.FieldReplyCount)
	}
	if m.addretweet_count != nil {
		fields = append(fields, tweet.FieldRetweetCount)
	}
	if m.addrate_count != nil {
		fields = append(fields, tweet.FieldRateCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TweetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tweet.FieldReplyCount:
		return m.AddedReplyCount()
	case tweet.FieldRetweetCount:
		return m.AddedRetweetCount()
	case tweet.FieldRateCount:
		return m.AddedRateCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the types mismatched the field
// types.
func (m *TweetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tweet.FieldReplyCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.AddReplyCount(v)
		return nil
	case tweet.FieldRetweetCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.AddRetweetCount(v)
		return nil
	case tweet.FieldRateCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.AddRateCount(v)
		return nil
	}
	return fmt.Errorf("unknown Tweet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TweetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tweet.FieldPlace) {
		fields = append(fields, tweet.FieldPlace)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TweetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TweetMutation) ClearField(name string) error {
	switch name {
	case tweet.FieldPlace:
		m.ClearPlace()
		return nil
	}
	return fmt.Errorf("unknown Tweet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TweetMutation) ResetField(name string) error {
	switch name {
	case tweet.FieldTweetID:
		m.ResetTweetID()
		return nil
	case tweet.FieldContent:
		m.ResetContent()
		return nil
	case tweet.FieldMedia:
		m.ResetMedia()
		return nil
	case tweet.FieldPlace:
		m.ResetPlace()
		return nil
	case tweet.FieldReplyCount:
		m.ResetReplyCount()
		return nil
	case tweet.FieldRetweetCount:
		m.ResetRetweetCount()
		return nil
	case tweet.FieldRateCount:
		m.ResetRateCount()
		return nil
	case tweet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tweet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Tweet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TweetMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner != nil {
		edges = append(edges, tweet.EdgeOwner)
	}
	if m.comments != nil {
		edges = append(edges, tweet.EdgeComments)
	}
	if m.rates != nil {
		edges = append(edges, tweet.EdgeRates)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TweetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tweet.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case tweet.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeRates:
		ids := make([]ent.Value, 0, len(m.rates))
		for id := range m.rates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TweetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcomments != nil {
		edges = append(edges, tweet.EdgeComments)
	}
	if m.removedrates != nil {
		edges = append(edges, tweet.EdgeRates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TweetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tweet.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeRates:
		ids := make([]ent.Value, 0, len(m.removedrates))
		for id := range m.removedrates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TweetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner {
		edges = append(edges, tweet.EdgeOwner)
	}
	if m.clearedcomments {
		edges = append(edges, tweet.EdgeComments)
	}
	if m.clearedrates {
		edges = append(edges, tweet.EdgeRates)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TweetMutation) EdgeCleared(name string) bool {
	switch name {
	case tweet.EdgeOwner:
		return m.clearedowner
	case tweet.EdgeComments:
		return m.clearedcomments
	case tweet.EdgeRates:
		return m.clearedrates
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TweetMutation) ClearEdge(name string) error {
	switch name {
	case tweet.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Tweet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TweetMutation) ResetEdge(name string) error {
	switch name {
	case tweet.EdgeOwner:
		m.ResetOwner()
		return nil
	case tweet.EdgeComments:
		m.ResetComments()
		return nil
	case tweet.EdgeRates:
		m.ResetRates()
		return nil
	}
	return fmt.Errorf("unknown Tweet edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	age             *int
	addage          *int
	name            *string
	clearedFields   map[string]struct{}
	tweets          map[int]struct{}
	removedtweets   map[int]struct{}
	clearedtweets   bool
	comments        map[int]struct{}
	removedcomments map[int]struct{}
	clearedcomments bool
	rates           map[int]struct{}
	removedrates    map[int]struct{}
	clearedrates    bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// AddTweetIDs adds the "tweets" edge to the Tweet entity by ids.
func (m *UserMutation) AddTweetIDs(ids ...int) {
	if m.tweets == nil {
		m.tweets = make(map[int]struct{})
	}
	for i := range ids {
		m.tweets[ids[i]] = struct{}{}
	}
}

// ClearTweets clears the "tweets" edge to the Tweet entity.
func (m *UserMutation) ClearTweets() {
	m.clearedtweets = true
}

// TweetsCleared reports if the "tweets" edge to the Tweet entity was cleared.
func (m *UserMutation) TweetsCleared() bool {
	return m.clearedtweets
}

// RemoveTweetIDs removes the "tweets" edge to the Tweet entity by IDs.
func (m *UserMutation) RemoveTweetIDs(ids ...int) {
	if m.removedtweets == nil {
		m.removedtweets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tweets, ids[i])
		m.removedtweets[ids[i]] = struct{}{}
	}
}

// RemovedTweets returns the removed IDs of the "tweets" edge to the Tweet entity.
func (m *UserMutation) RemovedTweetsIDs() (ids []int) {
	for id := range m.removedtweets {
		ids = append(ids, id)
	}
	return
}

// TweetsIDs returns the "tweets" edge IDs in the mutation.
func (m *UserMutation) TweetsIDs() (ids []int) {
	for id := range m.tweets {
		ids = append(ids, id)
	}
	return
}

// ResetTweets resets all changes to the "tweets" edge.
func (m *UserMutation) ResetTweets() {
	m.tweets = nil
	m.clearedtweets = false
	m.removedtweets = nil
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *UserMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *UserMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *UserMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *UserMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comments, ids[i])
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *UserMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *UserMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *UserMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// AddRateIDs adds the "rates" edge to the Rate entity by ids.
func (m *UserMutation) AddRateIDs(ids ...int) {
	if m.rates == nil {
		m.rates = make(map[int]struct{})
	}
	for i := range ids {
		m.rates[ids[i]] = struct{}{}
	}
}

// ClearRates clears the "rates" edge to the Rate entity.
func (m *UserMutation) ClearRates() {
	m.clearedrates = true
}

// RatesCleared reports if the "rates" edge to the Rate entity was cleared.
func (m *UserMutation) RatesCleared() bool {
	return m.clearedrates
}

// RemoveRateIDs removes the "rates" edge to the Rate entity by IDs.
func (m *UserMutation) RemoveRateIDs(ids ...int) {
	if m.removedrates == nil {
		m.removedrates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rates, ids[i])
		m.removedrates[ids[i]] = struct{}{}
	}
}

// RemovedRates returns the removed IDs of the "rates" edge to the Rate entity.
func (m *UserMutation) RemovedRatesIDs() (ids []int) {
	for id := range m.removedrates {
		ids = append(ids, id)
	}
	return
}

// RatesIDs returns the "rates" edge IDs in the mutation.
func (m *UserMutation) RatesIDs() (ids []int) {
	for id := range m.rates {
		ids = append(ids, id)
	}
	return
}

// ResetRates resets all changes to the "rates" edge.
func (m *UserMutation) ResetRates() {
	m.rates = nil
	m.clearedrates = false
	m.removedrates = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use types-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node types of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.Age()
	case user.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the types mismatched the field
// types.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the types mismatched the field
// types.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected types %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.tweets != nil {
		edges = append(edges, user.EdgeTweets)
	}
	if m.comments != nil {
		edges = append(edges, user.EdgeComments)
	}
	if m.rates != nil {
		edges = append(edges, user.EdgeRates)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.tweets))
		for id := range m.tweets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRates:
		ids := make([]ent.Value, 0, len(m.rates))
		for id := range m.rates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedtweets != nil {
		edges = append(edges, user.EdgeTweets)
	}
	if m.removedcomments != nil {
		edges = append(edges, user.EdgeComments)
	}
	if m.removedrates != nil {
		edges = append(edges, user.EdgeRates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.removedtweets))
		for id := range m.removedtweets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRates:
		ids := make([]ent.Value, 0, len(m.removedrates))
		for id := range m.removedrates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtweets {
		edges = append(edges, user.EdgeTweets)
	}
	if m.clearedcomments {
		edges = append(edges, user.EdgeComments)
	}
	if m.clearedrates {
		edges = append(edges, user.EdgeRates)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTweets:
		return m.clearedtweets
	case user.EdgeComments:
		return m.clearedcomments
	case user.EdgeRates:
		return m.clearedrates
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTweets:
		m.ResetTweets()
		return nil
	case user.EdgeComments:
		m.ResetComments()
		return nil
	case user.EdgeRates:
		m.ResetRates()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
