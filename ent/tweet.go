// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
	"time"
	"twix/ent/tweet"
	"twix/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Tweet is the model entity for the Tweet schema.
type Tweet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TweetID holds the value of the "tweet_id" field.
	TweetID *uuid.UUID `json:"tweet_id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Media holds the value of the "media" field.
	Media *url.URL `json:"media,omitempty"`
	// Place holds the value of the "place" field.
	Place *string `json:"place,omitempty"`
	// ReplyCount holds the value of the "reply_count" field.
	ReplyCount int `json:"reply_count,omitempty"`
	// RetweetCount holds the value of the "retweet_count" field.
	RetweetCount int `json:"retweet_count,omitempty"`
	// RateCount holds the value of the "rate_count" field.
	RateCount int `json:"rate_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TweetQuery when eager-loading is set.
	Edges        TweetEdges `json:"edges"`
	user_tweets  *int
	selectValues sql.SelectValues
}

// TweetEdges holds the relations/edges for other nodes in the graph.
type TweetEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// Rates holds the value of the rates edge.
	Rates []*Rate `json:"rates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// types was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TweetEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// RatesOrErr returns the Rates value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) RatesOrErr() ([]*Rate, error) {
	if e.loadedTypes[2] {
		return e.Rates, nil
	}
	return nil, &NotLoadedError{edge: "rates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tweet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tweet.FieldMedia:
			values[i] = new([]byte)
		case tweet.FieldID, tweet.FieldReplyCount, tweet.FieldRetweetCount, tweet.FieldRateCount:
			values[i] = new(sql.NullInt64)
		case tweet.FieldContent, tweet.FieldPlace:
			values[i] = new(sql.NullString)
		case tweet.FieldCreatedAt, tweet.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tweet.FieldTweetID:
			values[i] = new(uuid.UUID)
		case tweet.ForeignKeys[0]: // user_tweets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tweet fields.
func (t *Tweet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tweet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected types %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tweet.FieldTweetID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected types %T for field tweet_id", values[i])
			} else if value != nil {
				t.TweetID = value
			}
		case tweet.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected types %T for field content", values[i])
			} else if value.Valid {
				t.Content = value.String
			}
		case tweet.FieldMedia:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected types %T for field media", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Media); err != nil {
					return fmt.Errorf("unmarshal field media: %w", err)
				}
			}
		case tweet.FieldPlace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected types %T for field place", values[i])
			} else if value.Valid {
				t.Place = new(string)
				*t.Place = value.String
			}
		case tweet.FieldReplyCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected types %T for field reply_count", values[i])
			} else if value.Valid {
				t.ReplyCount = int(value.Int64)
			}
		case tweet.FieldRetweetCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected types %T for field retweet_count", values[i])
			} else if value.Valid {
				t.RetweetCount = int(value.Int64)
			}
		case tweet.FieldRateCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected types %T for field rate_count", values[i])
			} else if value.Valid {
				t.RateCount = int(value.Int64)
			}
		case tweet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected types %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tweet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected types %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tweet.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected types %T for edge-field user_tweets", value)
			} else if value.Valid {
				t.user_tweets = new(int)
				*t.user_tweets = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tweet.
// This includes values selected through modifiers, order, etc.
func (t *Tweet) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Tweet entity.
func (t *Tweet) QueryOwner() *UserQuery {
	return NewTweetClient(t.config).QueryOwner(t)
}

// QueryComments queries the "comments" edge of the Tweet entity.
func (t *Tweet) QueryComments() *CommentQuery {
	return NewTweetClient(t.config).QueryComments(t)
}

// QueryRates queries the "rates" edge of the Tweet entity.
func (t *Tweet) QueryRates() *RateQuery {
	return NewTweetClient(t.config).QueryRates(t)
}

// Update returns a builder for updating this Tweet.
// Note that you need to call Tweet.Unwrap() before calling this method if this Tweet
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tweet) Update() *TweetUpdateOne {
	return NewTweetClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tweet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tweet) Unwrap() *Tweet {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tweet is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tweet) String() string {
	var builder strings.Builder
	builder.WriteString("Tweet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("tweet_id=")
	builder.WriteString(fmt.Sprintf("%v", t.TweetID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(t.Content)
	builder.WriteString(", ")
	builder.WriteString("media=")
	builder.WriteString(fmt.Sprintf("%v", t.Media))
	builder.WriteString(", ")
	if v := t.Place; v != nil {
		builder.WriteString("place=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("reply_count=")
	builder.WriteString(fmt.Sprintf("%v", t.ReplyCount))
	builder.WriteString(", ")
	builder.WriteString("retweet_count=")
	builder.WriteString(fmt.Sprintf("%v", t.RetweetCount))
	builder.WriteString(", ")
	builder.WriteString("rate_count=")
	builder.WriteString(fmt.Sprintf("%v", t.RateCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tweets is a parsable slice of Tweet.
type Tweets []*Tweet
