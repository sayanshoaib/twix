// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"
	"twix/ent/comment"
	"twix/ent/predicate"
	"twix/ent/rate"
	"twix/ent/tweet"
	"twix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TweetUpdate is the builder for updating Tweet entities.
type TweetUpdate struct {
	config
	hooks    []Hook
	mutation *TweetMutation
}

// Where appends a list predicates to the TweetUpdate builder.
func (tu *TweetUpdate) Where(ps ...predicate.Tweet) *TweetUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTweetID sets the "tweet_id" field.
func (tu *TweetUpdate) SetTweetID(u *uuid.UUID) *TweetUpdate {
	tu.mutation.SetTweetID(u)
	return tu
}

// SetContent sets the "content" field.
func (tu *TweetUpdate) SetContent(s string) *TweetUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableContent(s *string) *TweetUpdate {
	if s != nil {
		tu.SetContent(*s)
	}
	return tu
}

// SetMedia sets the "media" field.
func (tu *TweetUpdate) SetMedia(u *url.URL) *TweetUpdate {
	tu.mutation.SetMedia(u)
	return tu
}

// SetPlace sets the "place" field.
func (tu *TweetUpdate) SetPlace(s string) *TweetUpdate {
	tu.mutation.SetPlace(s)
	return tu
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (tu *TweetUpdate) SetNillablePlace(s *string) *TweetUpdate {
	if s != nil {
		tu.SetPlace(*s)
	}
	return tu
}

// ClearPlace clears the value of the "place" field.
func (tu *TweetUpdate) ClearPlace() *TweetUpdate {
	tu.mutation.ClearPlace()
	return tu
}

// SetReplyCount sets the "reply_count" field.
func (tu *TweetUpdate) SetReplyCount(i int) *TweetUpdate {
	tu.mutation.ResetReplyCount()
	tu.mutation.SetReplyCount(i)
	return tu
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableReplyCount(i *int) *TweetUpdate {
	if i != nil {
		tu.SetReplyCount(*i)
	}
	return tu
}

// AddReplyCount adds i to the "reply_count" field.
func (tu *TweetUpdate) AddReplyCount(i int) *TweetUpdate {
	tu.mutation.AddReplyCount(i)
	return tu
}

// SetRetweetCount sets the "retweet_count" field.
func (tu *TweetUpdate) SetRetweetCount(i int) *TweetUpdate {
	tu.mutation.ResetRetweetCount()
	tu.mutation.SetRetweetCount(i)
	return tu
}

// SetNillableRetweetCount sets the "retweet_count" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableRetweetCount(i *int) *TweetUpdate {
	if i != nil {
		tu.SetRetweetCount(*i)
	}
	return tu
}

// AddRetweetCount adds i to the "retweet_count" field.
func (tu *TweetUpdate) AddRetweetCount(i int) *TweetUpdate {
	tu.mutation.AddRetweetCount(i)
	return tu
}

// SetRateCount sets the "rate_count" field.
func (tu *TweetUpdate) SetRateCount(i int) *TweetUpdate {
	tu.mutation.ResetRateCount()
	tu.mutation.SetRateCount(i)
	return tu
}

// SetNillableRateCount sets the "rate_count" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableRateCount(i *int) *TweetUpdate {
	if i != nil {
		tu.SetRateCount(*i)
	}
	return tu
}

// AddRateCount adds i to the "rate_count" field.
func (tu *TweetUpdate) AddRateCount(i int) *TweetUpdate {
	tu.mutation.AddRateCount(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TweetUpdate) SetCreatedAt(t time.Time) *TweetUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableCreatedAt(t *time.Time) *TweetUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TweetUpdate) SetUpdatedAt(t time.Time) *TweetUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *TweetUpdate) SetOwnerID(id int) *TweetUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tu *TweetUpdate) SetNillableOwnerID(id *int) *TweetUpdate {
	if id != nil {
		tu = tu.SetOwnerID(*id)
	}
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *TweetUpdate) SetOwner(u *User) *TweetUpdate {
	return tu.SetOwnerID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tu *TweetUpdate) AddCommentIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddCommentIDs(ids...)
	return tu
}

// AddComments adds the "comments" edges to the Comment entity.
func (tu *TweetUpdate) AddComments(c ...*Comment) *TweetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCommentIDs(ids...)
}

// AddRateIDs adds the "rates" edge to the Rate entity by IDs.
func (tu *TweetUpdate) AddRateIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddRateIDs(ids...)
	return tu
}

// AddRates adds the "rates" edges to the Rate entity.
func (tu *TweetUpdate) AddRates(r ...*Rate) *TweetUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddRateIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tu *TweetUpdate) Mutation() *TweetMutation {
	return tu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *TweetUpdate) ClearOwner() *TweetUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// ClearComments clears all "comments" edges to the Comment entity.
func (tu *TweetUpdate) ClearComments() *TweetUpdate {
	tu.mutation.ClearComments()
	return tu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (tu *TweetUpdate) RemoveCommentIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveCommentIDs(ids...)
	return tu
}

// RemoveComments removes "comments" edges to Comment entities.
func (tu *TweetUpdate) RemoveComments(c ...*Comment) *TweetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCommentIDs(ids...)
}

// ClearRates clears all "rates" edges to the Rate entity.
func (tu *TweetUpdate) ClearRates() *TweetUpdate {
	tu.mutation.ClearRates()
	return tu
}

// RemoveRateIDs removes the "rates" edge to Rate entities by IDs.
func (tu *TweetUpdate) RemoveRateIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveRateIDs(ids...)
	return tu
}

// RemoveRates removes "rates" edges to Rate entities.
func (tu *TweetUpdate) RemoveRates(r ...*Rate) *TweetUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveRateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TweetUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TweetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TweetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TweetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TweetUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tweet.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TweetUpdate) check() error {
	if v, ok := tu.mutation.Content(); ok {
		if err := tweet.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Tweet.content": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ReplyCount(); ok {
		if err := tweet.ReplyCountValidator(v); err != nil {
			return &ValidationError{Name: "reply_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.reply_count": %w`, err)}
		}
	}
	if v, ok := tu.mutation.RetweetCount(); ok {
		if err := tweet.RetweetCountValidator(v); err != nil {
			return &ValidationError{Name: "retweet_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.retweet_count": %w`, err)}
		}
	}
	if v, ok := tu.mutation.RateCount(); ok {
		if err := tweet.RateCountValidator(v); err != nil {
			return &ValidationError{Name: "rate_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.rate_count": %w`, err)}
		}
	}
	return nil
}

func (tu *TweetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweet.Table, tweet.Columns, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TweetID(); ok {
		_spec.SetField(tweet.FieldTweetID, field.TypeUUID, value)
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(tweet.FieldContent, field.TypeString, value)
	}
	if value, ok := tu.mutation.Media(); ok {
		_spec.SetField(tweet.FieldMedia, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.Place(); ok {
		_spec.SetField(tweet.FieldPlace, field.TypeString, value)
	}
	if tu.mutation.PlaceCleared() {
		_spec.ClearField(tweet.FieldPlace, field.TypeString)
	}
	if value, ok := tu.mutation.ReplyCount(); ok {
		_spec.SetField(tweet.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedReplyCount(); ok {
		_spec.AddField(tweet.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.RetweetCount(); ok {
		_spec.SetField(tweet.FieldRetweetCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedRetweetCount(); ok {
		_spec.AddField(tweet.FieldRetweetCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.RateCount(); ok {
		_spec.SetField(tweet.FieldRateCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedRateCount(); ok {
		_spec.AddField(tweet.FieldRateCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tweet.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.OwnerTable,
			Columns: []string{tweet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.OwnerTable,
			Columns: []string{tweet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.CommentsTable,
			Columns: []string{tweet.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.CommentsTable,
			Columns: []string{tweet.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.CommentsTable,
			Columns: []string{tweet.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RatesTable,
			Columns: []string{tweet.RatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRatesIDs(); len(nodes) > 0 && !tu.mutation.RatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RatesTable,
			Columns: []string{tweet.RatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RatesTable,
			Columns: []string{tweet.RatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TweetUpdateOne is the builder for updating a single Tweet entity.
type TweetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TweetMutation
}

// SetTweetID sets the "tweet_id" field.
func (tuo *TweetUpdateOne) SetTweetID(u *uuid.UUID) *TweetUpdateOne {
	tuo.mutation.SetTweetID(u)
	return tuo
}

// SetContent sets the "content" field.
func (tuo *TweetUpdateOne) SetContent(s string) *TweetUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableContent(s *string) *TweetUpdateOne {
	if s != nil {
		tuo.SetContent(*s)
	}
	return tuo
}

// SetMedia sets the "media" field.
func (tuo *TweetUpdateOne) SetMedia(u *url.URL) *TweetUpdateOne {
	tuo.mutation.SetMedia(u)
	return tuo
}

// SetPlace sets the "place" field.
func (tuo *TweetUpdateOne) SetPlace(s string) *TweetUpdateOne {
	tuo.mutation.SetPlace(s)
	return tuo
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillablePlace(s *string) *TweetUpdateOne {
	if s != nil {
		tuo.SetPlace(*s)
	}
	return tuo
}

// ClearPlace clears the value of the "place" field.
func (tuo *TweetUpdateOne) ClearPlace() *TweetUpdateOne {
	tuo.mutation.ClearPlace()
	return tuo
}

// SetReplyCount sets the "reply_count" field.
func (tuo *TweetUpdateOne) SetReplyCount(i int) *TweetUpdateOne {
	tuo.mutation.ResetReplyCount()
	tuo.mutation.SetReplyCount(i)
	return tuo
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableReplyCount(i *int) *TweetUpdateOne {
	if i != nil {
		tuo.SetReplyCount(*i)
	}
	return tuo
}

// AddReplyCount adds i to the "reply_count" field.
func (tuo *TweetUpdateOne) AddReplyCount(i int) *TweetUpdateOne {
	tuo.mutation.AddReplyCount(i)
	return tuo
}

// SetRetweetCount sets the "retweet_count" field.
func (tuo *TweetUpdateOne) SetRetweetCount(i int) *TweetUpdateOne {
	tuo.mutation.ResetRetweetCount()
	tuo.mutation.SetRetweetCount(i)
	return tuo
}

// SetNillableRetweetCount sets the "retweet_count" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableRetweetCount(i *int) *TweetUpdateOne {
	if i != nil {
		tuo.SetRetweetCount(*i)
	}
	return tuo
}

// AddRetweetCount adds i to the "retweet_count" field.
func (tuo *TweetUpdateOne) AddRetweetCount(i int) *TweetUpdateOne {
	tuo.mutation.AddRetweetCount(i)
	return tuo
}

// SetRateCount sets the "rate_count" field.
func (tuo *TweetUpdateOne) SetRateCount(i int) *TweetUpdateOne {
	tuo.mutation.ResetRateCount()
	tuo.mutation.SetRateCount(i)
	return tuo
}

// SetNillableRateCount sets the "rate_count" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableRateCount(i *int) *TweetUpdateOne {
	if i != nil {
		tuo.SetRateCount(*i)
	}
	return tuo
}

// AddRateCount adds i to the "rate_count" field.
func (tuo *TweetUpdateOne) AddRateCount(i int) *TweetUpdateOne {
	tuo.mutation.AddRateCount(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TweetUpdateOne) SetCreatedAt(t time.Time) *TweetUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableCreatedAt(t *time.Time) *TweetUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TweetUpdateOne) SetUpdatedAt(t time.Time) *TweetUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *TweetUpdateOne) SetOwnerID(id int) *TweetUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableOwnerID(id *int) *TweetUpdateOne {
	if id != nil {
		tuo = tuo.SetOwnerID(*id)
	}
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *TweetUpdateOne) SetOwner(u *User) *TweetUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tuo *TweetUpdateOne) AddCommentIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddCommentIDs(ids...)
	return tuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (tuo *TweetUpdateOne) AddComments(c ...*Comment) *TweetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCommentIDs(ids...)
}

// AddRateIDs adds the "rates" edge to the Rate entity by IDs.
func (tuo *TweetUpdateOne) AddRateIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddRateIDs(ids...)
	return tuo
}

// AddRates adds the "rates" edges to the Rate entity.
func (tuo *TweetUpdateOne) AddRates(r ...*Rate) *TweetUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddRateIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tuo *TweetUpdateOne) Mutation() *TweetMutation {
	return tuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *TweetUpdateOne) ClearOwner() *TweetUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (tuo *TweetUpdateOne) ClearComments() *TweetUpdateOne {
	tuo.mutation.ClearComments()
	return tuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (tuo *TweetUpdateOne) RemoveCommentIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveCommentIDs(ids...)
	return tuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (tuo *TweetUpdateOne) RemoveComments(c ...*Comment) *TweetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCommentIDs(ids...)
}

// ClearRates clears all "rates" edges to the Rate entity.
func (tuo *TweetUpdateOne) ClearRates() *TweetUpdateOne {
	tuo.mutation.ClearRates()
	return tuo
}

// RemoveRateIDs removes the "rates" edge to Rate entities by IDs.
func (tuo *TweetUpdateOne) RemoveRateIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveRateIDs(ids...)
	return tuo
}

// RemoveRates removes "rates" edges to Rate entities.
func (tuo *TweetUpdateOne) RemoveRates(r ...*Rate) *TweetUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveRateIDs(ids...)
}

// Where appends a list predicates to the TweetUpdate builder.
func (tuo *TweetUpdateOne) Where(ps ...predicate.Tweet) *TweetUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TweetUpdateOne) Select(field string, fields ...string) *TweetUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tweet entity.
func (tuo *TweetUpdateOne) Save(ctx context.Context) (*Tweet, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TweetUpdateOne) SaveX(ctx context.Context) *Tweet {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TweetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TweetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TweetUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tweet.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TweetUpdateOne) check() error {
	if v, ok := tuo.mutation.Content(); ok {
		if err := tweet.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Tweet.content": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ReplyCount(); ok {
		if err := tweet.ReplyCountValidator(v); err != nil {
			return &ValidationError{Name: "reply_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.reply_count": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.RetweetCount(); ok {
		if err := tweet.RetweetCountValidator(v); err != nil {
			return &ValidationError{Name: "retweet_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.retweet_count": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.RateCount(); ok {
		if err := tweet.RateCountValidator(v); err != nil {
			return &ValidationError{Name: "rate_count", err: fmt.Errorf(`ent: validator failed for field "Tweet.rate_count": %w`, err)}
		}
	}
	return nil
}

func (tuo *TweetUpdateOne) sqlSave(ctx context.Context) (_node *Tweet, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweet.Table, tweet.Columns, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tweet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tweet.FieldID)
		for _, f := range fields {
			if !tweet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tweet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TweetID(); ok {
		_spec.SetField(tweet.FieldTweetID, field.TypeUUID, value)
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(tweet.FieldContent, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Media(); ok {
		_spec.SetField(tweet.FieldMedia, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.Place(); ok {
		_spec.SetField(tweet.FieldPlace, field.TypeString, value)
	}
	if tuo.mutation.PlaceCleared() {
		_spec.ClearField(tweet.FieldPlace, field.TypeString)
	}
	if value, ok := tuo.mutation.ReplyCount(); ok {
		_spec.SetField(tweet.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedReplyCount(); ok {
		_spec.AddField(tweet.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.RetweetCount(); ok {
		_spec.SetField(tweet.FieldRetweetCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedRetweetCount(); ok {
		_spec.AddField(tweet.FieldRetweetCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.RateCount(); ok {
		_spec.SetField(tweet.FieldRateCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedRateCount(); ok {
		_spec.AddField(tweet.FieldRateCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tweet.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.OwnerTable,
			Columns: []string{tweet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.OwnerTable,
			Columns: []string{tweet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.CommentsTable,
			Columns: []string{tweet.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.CommentsTable,
			Columns: []string{tweet.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.CommentsTable,
			Columns: []string{tweet.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RatesTable,
			Columns: []string{tweet.RatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRatesIDs(); len(nodes) > 0 && !tuo.mutation.RatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RatesTable,
			Columns: []string{tweet.RatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RatesTable,
			Columns: []string{tweet.RatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tweet{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
